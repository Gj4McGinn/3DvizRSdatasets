## Missing values of GPP are replaced by the elevation matrix for the heights, but scaled such that
## the non-GPP heights are too big (20000 is approx the range of elmat from ocean bottom to Mt. Everest..)
#elmat4plot <- ifelse(elmat < 0 | is.na(height2Plot), elmat/(20000/(maxVal-minVal)), height2Plot - minVal )
# elmat4plot <-
#   ifelse(
#     elmat < 0 |
#       is.na(height2Plot),
#     elmat / (20000 / (maxVal - minVal)),
#     height2Plot - nudgeMin2ZeroElev * minVal
#   )
#elmat4plot <- height2Plot
water <- array(dim = c(dim(elmat) %>% rev(), 4))
wCol <- col2rgb(oceanCol)
for (i2 in 1:3)
water[, , i2] <- wCol[i2] / 255
water[, , 4] <-
(0.5 * (is.na(valFilt) & (elmat < 0))) %>% t()
# Modified to work with Sphere
# water[, , 4] <-
#   (0.5 * ((elmat < 0))) %>% t()
#rgl.clear()
res1 <-
rs_surface(
height2Plot %>% replace_na(elevat4NA),
zscale = goodzScale,
valOrig,
water = F, #!renderSphere,
shadowReachFactor = 2,
shadowintens = 0.7,
watercolor = oceanCol,
zoom = 0.7,
solid = T,
windowsize = c(1920, 1080),
valRange = c(minVal, maxVal),
img_overlay1 = over,
img_overlay2 = water,
theta = theta,
plot = !renderSphere & !renderFakeSphere,
na.color=col4NA,
pal=pal,
...
)
} else {
#rgl.clear()
res1 <-
rs_surface(
height2Plot %>% replace_na(elevat4NA),
zscale = goodzScale,
valOrig,
water = FALSE,
shadowReachFactor = 2,
shadowintens = 0.8,
zoom = 0.7,
windowsize = c(1920, 1080),
valRange = c(minVal, maxVal),
img_overlay1 = over,
img_overlay2 = over2,
theta = theta,
plot = !renderSphere & !renderFakeSphere,
na.color=col4NA,
pal=pal,
...
)
} #else renderOcean
#title3d(main=month.name[i])
## If classical projected way using rayshader, use the rayshader function to create
## the snapshot
#if (!renderFakeSphere & !renderSphere)
## Otherwise use rgl functions
if (renderFakeSphere) {
png::writePNG(res1, target = "Earth.png")
spheres3d(
0,
texture = "Earth.png",
textype = "rgb",
color = "white",
specular = "black",
texminfilter = "linear.mipmap.linear",
texmagfilter = "linear",
texmipmap = T
)
# title3d(main = titles[i + (addlast == 1 &
#                              lambda == 1)], size = 9)
#view3d(theta = theta, phi=phi)
# snapshot3d(
#   filename = glue::glue(
#     "{outFolder}/{outPrefix}/{outPrefix}_{str_pad(cnt+cntStart-1,5,pad='0')}.png"
#   )
# )
}
if (renderSphere) {
rst <- raster(t(height2Plot), template=br) %>% reclassify(cbind(NA, elevat4NA))
rasterHasNA  <- any(is.na(rst[]))
#png::writePNG(res, target = "Earth.png")
tr <- NULL
if (useRayShade4Sphere) tr <-  255*raster::stack(raster((res1[,,1]), template=br),
raster((res1[,,2]), template=br),
raster((res1[,,3]), template=br  ))
else {
if (renderCountries) tr <- 255*raster::stack(raster(over[,,1], template=br),
raster(over[,,2], template=br),
raster(over[,,3], template=br)
)
colrst <- raster(t(valOrig), template=br)#; colrst[is.na(colrst)]  <- -1
qmCol <- quadmesh(colrst, na.rm=F)
}
qm <- quadmesh(rst, na.rm=F, texture=tr) #, texture="Earth.png")  #%>% reclassify(cbind(NA,NA, -1), right=F) %>% aggregate()
heightRange <- range(qm$vb[3,], na.rm=T)
if (prod(heightRange) < 0) # if range crosses zero then have rho(0) = 1
shiftZero <- 0.0
else
shiftZero  <- heightRange[1]
rho <- 1 + (sphereExtFac) * (qm$vb[3,] - shiftZero)/diff(heightRange)
x <-  rev(cos((qm$vb[1,]-90)/180*pi)) * sin((qm$vb[2,]-90)/180*pi) * 100 * rho # (100 + qm$vb[3,])
z <- rev(sin((qm$vb[1,]-90)/180*pi)) * sin((qm$vb[2,]-90)/180*pi) * 100 * rho # (100 + qm$vb[3,])
y <-  cos((qm$vb[2,]-90)/180*pi) * 100*rho
qms <- qm
qms$vb[1,]  <- x; qms$vb[2,] <- y; qms$vb[3,] <- z
if (!rasterHasNA) qms  <- addNormals(qms)
# pal[scales::rescale_mid(values, c(1,ncol), valRange)]
clear3d()
clear3d(type="lights"); light3d()#0,23, specular="grey50", viewp=T)
if (useRayShade4Sphere) {
# light3d(-45,-15, specular="white", viewp=T)
shade3d(qms, specular="black")
}
else {
qms$colorValue  <- scales::rescale_mid(qmCol$vb[3,qmCol$ib], c(1,length(pal)), c(minVal, maxVal))
plotColor <- pal[qms$colorValue]
plotColor[is.na(plotColor)] <- col4NA
shade3d(qms, col = plotColor , specular="grey30", meshColor="legacy", shininess=80)
}
if (renderOcean) {
#ocean <- is.na(qmCol$vb[3,qmCol$ib]) & (qm$vb[3,qm$ib] < 0)
#plotColor[ocean]  <- oceanCol
ocean <- qm
x <-  rev(cos((qm$vb[1,]-90)/180*pi)) * sin((qm$vb[2,]-90)/180*pi) * 100
z <- rev(sin((qm$vb[1,]-90)/180*pi)) * sin((qm$vb[2,]-90)/180*pi) * 100
y <-  cos((qm$vb[2,]-90)/180*pi) * 100
ocean$vb[1,]  <- x; ocean$vb[2,] <- y; ocean$vb[3,] <- z
ocean$texcoords <- NULL
# shade3d(ocean, col = oceanCol , specular="black", meshColor="legacy", alpha=0.8 * (plotColor == col4NA))
shade3d(ocean, col = oceanCol , specular="black", meshColor="legacy", alpha=0.8 * is.na(qms$colorValue))
}
}
for (round in 1:nRounds) {
cnt2 <- (round-1) * (nlayers(br) - 1 + append1st) * (nSubSteps + addlast) + cnt
theta <- allTheta[cnt2]
phi <- allPhi[cnt2]
view3d(theta = theta, phi=phi, zoom=0.7)
pngOut <- glue::glue("{outFolder}/{outPrefix}/{outPrefix}_{str_pad(cnt2+cntStart-1,5,pad='0')}.png")
render_snapshot(
filename = pngOut,
title_text = titles[i + (addlast == 1 & lambda == 1)],
title_position = "North",
title_size = 50
)
if (renderLegend) decorate_png(file = pngOut, legend_file = paste0(dirname(pngOut),"/legend.png"),
caption = caption, overwrite = TRUE)
} # round
} # j
} # i
} # if !justrendervideo
files <-
list.files(
path = glue::glue("{outFolder}/{outPrefix}/"),
pattern = glue::glue("{outPrefix}_.*.png"),
full.names = T
)
if (renderVideo) {
renderVideos(files, rewindLoop = rewindLoop, loop=loop, framerate = framerate, ... )
} #rendervideo
### WITH LOOP ONE NEEDS:
# av::av_encode_video(files, output=glue::glue("{outFolder}{outPrefix}_animation.mp4"), framerate = 4,
#                     vfilter = "loop=3:29:0")
# gifski::gifski(files, gif_file = glue::glue("{outFolder}{outPrefix}_animation.gif"), delay = 0.25, width=2400, height=1200)
if (justReRenderVideo) res1 <- "Just the video was rendered"
if (!exists("res1") & resume)  res1 <- "No result produced with resume, everything was there!"
invisible(files)
}
brick2movie(br[[6]] %>% aggregate(2) %>% rast() %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
brick2movie <-
function(brick = br,
eleRast = globalDEM0.5deg,
eleRastOnly4NA = TRUE,
file = NULL,
renderOcean = FALSE,
renderSphere = FALSE,
useRayShade4Sphere = FALSE,
renderFakeSphere = FALSE,
sphereExtFac = 0.2,
renderCountries = FALSE,
minVal = NULL,
maxVal = NULL,
nudgeMin2ZeroElev = F,
maxFac = 1.0,
gaussianSmoothSigma = 0,
zscaleRatio = 40.,
col4NA = "white",
elevat4NA = 0.0,
oceanCol = "paleturquoise",
nSubSteps = 1,
rewindLoop = F,
loop = 0,
append1st = TRUE,
outPrefix = "Animation",
outFolder = tempdir(),
framerate = 8,
titles = NULL,
justReRenderVideo = FALSE,
renderVideo = TRUE,
renderLegend = TRUE,
leg.tit=expression(g~C~~m^{-2}~day^{-1}),
caption="",
resume=FALSE,
nRounds = 1,
thetaStartEnd = c(0, 0),
phiStartEnd=c(0, 0) + 45*!renderSphere,
cntStart = 0,
over2 = NULL,
pal=palette(),
...) {
if (!justReRenderVideo) {
if (is.null(brick))
br <- (brick(file)) #%>% flip(direction = "y")
else
br  <- brick
dimbr <- dim(br)
dir.create(glue::glue("{outFolder}/{outPrefix}/"), showWarnings = F )
eleRastClass <- class(eleRast)
if (str_starts(eleRastClass, "Raster")) {
#eleRast %<>% resample(br)
# eleRast %<>% projectRaster(to=br)
# elmat  <-  eleRast %>%  raster_to_matrix()
#elmat  <- eleRast %>% terra::rast() %>% terra::project(crs(br) %>% as.character(), mask=T) %>% raster() %>% raster_to_matrix()
elmat  <- eleRast %>% terra::rast() %>% terra::resample(rast(br)) %>% raster() %>% raster_to_matrix()
}
#over <- generate_line_overlay(ne_coastline() %>% sf::st_as_sf(), extent(br), heightmap = elmat, linewidth = 0.5)
if (renderCountries)
over <- generate_line_overlay(
st_as_sf(rnaturalearth::countries110) %>% sf::st_cast("MULTILINESTRING") %>% st_transform(crs(br)),
extent(br),
heightmap = matrix(0, nrow=dimbr[2], ncol=dimbr[1]),
linewidth = 0.5 * sqrt(prod(dimbr[1:2])/360/720)
)
else
over <- NULL
smoothButReinsertNA <- function(r, sigma) {
r_out <- focal(r,
w = focalWeight(r, sigma * sqrt(prod(res(r))), type = "Gauss"),
na.rm = T,
pad = T
) %>% mask(r)
}
# if (gaussianSmoothSigma > 0) br <- map(br %>% as.list, ~focal(.x, w=focalWeight(.x, gaussianSmoothSigma, type="Gauss"), na.rm=T)) %>% stack
if (gaussianSmoothSigma > 0)
br <-
map(br %>% as.list,
~ smoothButReinsertNA(.x, gaussianSmoothSigma)) %>% stack
if (minVal %>% is.null)
minVal <- minValue(br) %>% min
if (maxVal %>% is.null)
maxVal <- maxValue(br) %>% max
maxVal <- maxVal * maxFac
if (renderLegend) {
#ncol <- length(palette())
dummy <- scales::rescale_mid(c(minVal, maxVal), to=c(1, length(pal))) %>% as.integer()
png(glue::glue("{outFolder}/{outPrefix}/legend.png"),width=350, height=800)
par(cex=2.6)
print(fields::image.plot(legend.only = T, col=pal[seq(dummy[1], dummy[2])], legend.width = 3, zlim=c(minVal, maxVal),
legend.lab = leg.tit, legend.cex = 3, legend.line = 3, legend.mar=24,  legend.args=list( cex=1.5, side=4, line=2)))
par(cex=1)
dev.off()
}
#print(maxVal)
goodzScale <-
(maxVal - minVal) / zscaleRatio # a zscale of (maxVal-minVal) would mean the range of GPP gets only to the height of one pixel width
# factor 40 (zscaleRatio) means this range will be 40 times a pixel width
cnt <-  0
total <- (nSubSteps * (nlayers(br) - 1 + append1st) +!append1st) * nRounds
allTheta <- approx(thetaStartEnd, n=total)$y
allPhi <- approx(phiStartEnd, n=total)$y
if (is.null(titles)) titles <- rep("", total)
for (i in seq(nlayers(br) - 1 + append1st)) {
addlast <- ifelse(i == (nlayers(br) - 1) & !append1st, 1, 0)
for (j in 0:(nSubSteps - 1 + addlast)) {
#theta <- cnt / (total + 1) * diff(thetaStartEnd) + thetaStartEnd[1]
cnt <- cnt + 1
if (resume &
file.exists(glue::glue("{outFolder}/{outPrefix}/{outPrefix}_{str_pad(cnt+cntStart-1,5,pad='0')}.png"))) next
theta <- allTheta[cnt]
phi <- allPhi[cnt]
lambda  <-  j / nSubSteps
print(glue::glue("{cnt} of {total/nRounds} steps: layer={i}, substep={j}, theta={format(theta)}, phi={format(phi)}, title={titles[i+(addlast==1 & lambda==1)]}"))
valOrig <- ((1 - lambda) * br[[i]] + lambda * br[[i %% nlayers(br) + 1]]) %>% raster_to_matrix()
valFilt <- imagine::quantileFilter(valOrig, 3, 0.001)
if (str_starts(eleRastClass, "Raster") & !eleRastOnly4NA) {
height2Plot  <- elmat
} else {
height2Plot <- valOrig
height2Plot[is.na(valOrig)]  <- valFilt[is.na(valOrig)] #* 0.0 + minVal
}
if (str_starts(eleRastClass, "Raster") & eleRastOnly4NA) {
height2Plot  <- ifelse(is.na(height2Plot),
elmat / diff(range(elmat, na.rm=TRUE)) * diff(range(height2Plot, na.rm=T)),
height2Plot - nudgeMin2ZeroElev * min(height2Plot, na.rm=T))
}
goodzScale <- diff(range(height2Plot, na.rm=TRUE)) / zscaleRatio
if (renderOcean) {
## Missing values of GPP are replaced by the elevation matrix for the heights, but scaled such that
## the non-GPP heights are too big (20000 is approx the range of elmat from ocean bottom to Mt. Everest..)
#elmat4plot <- ifelse(elmat < 0 | is.na(height2Plot), elmat/(20000/(maxVal-minVal)), height2Plot - minVal )
# elmat4plot <-
#   ifelse(
#     elmat < 0 |
#       is.na(height2Plot),
#     elmat / (20000 / (maxVal - minVal)),
#     height2Plot - nudgeMin2ZeroElev * minVal
#   )
#elmat4plot <- height2Plot
water <- array(dim = c(dim(elmat) %>% rev(), 4))
wCol <- col2rgb(oceanCol)
for (i2 in 1:3)
water[, , i2] <- wCol[i2] / 255
water[, , 4] <-
(0.5 * (is.na(valFilt) & (elmat < 0))) %>% t()
# Modified to work with Sphere
# water[, , 4] <-
#   (0.5 * ((elmat < 0))) %>% t()
#rgl.clear()
res1 <-
rs_surface(
height2Plot %>% replace_na(elevat4NA),
zscale = goodzScale,
valOrig,
water = F, #!renderSphere,
shadowReachFactor = 2,
shadowintens = 0.7,
watercolor = oceanCol,
zoom = 0.7,
solid = T,
windowsize = c(1920, 1080),
valRange = c(minVal, maxVal),
img_overlay1 = over,
img_overlay2 = water,
theta = theta,
plot = !renderSphere & !renderFakeSphere,
na.color=col4NA,
pal=pal,
...
)
} else {
#rgl.clear()
res1 <-
rs_surface(
height2Plot %>% replace_na(elevat4NA),
zscale = goodzScale,
valOrig,
water = FALSE,
shadowReachFactor = 2,
shadowintens = 0.8,
zoom = 0.7,
windowsize = c(1920, 1080),
valRange = c(minVal, maxVal),
img_overlay1 = over,
img_overlay2 = over2,
theta = theta,
plot = !renderSphere & !renderFakeSphere,
na.color=col4NA,
pal=pal,
...
)
} #else renderOcean
#title3d(main=month.name[i])
## If classical projected way using rayshader, use the rayshader function to create
## the snapshot
#if (!renderFakeSphere & !renderSphere)
## Otherwise use rgl functions
if (renderFakeSphere) {
png::writePNG(res1, target = "Earth.png")
spheres3d(
0,
texture = "Earth.png",
textype = "rgb",
color = "white",
specular = "black",
texminfilter = "linear.mipmap.linear",
texmagfilter = "linear",
texmipmap = T
)
# title3d(main = titles[i + (addlast == 1 &
#                              lambda == 1)], size = 9)
#view3d(theta = theta, phi=phi)
# snapshot3d(
#   filename = glue::glue(
#     "{outFolder}/{outPrefix}/{outPrefix}_{str_pad(cnt+cntStart-1,5,pad='0')}.png"
#   )
# )
}
if (renderSphere) {
rst <- raster(t(height2Plot), template=br) %>% reclassify(cbind(NA, elevat4NA))
rasterHasNA  <- any(is.na(rst[]))
#png::writePNG(res, target = "Earth.png")
tr <- NULL
if (useRayShade4Sphere) tr <-  255*raster::stack(raster((res1[,,1]), template=br),
raster((res1[,,2]), template=br),
raster((res1[,,3]), template=br  ))
else {
if (renderCountries) tr <- 255*raster::stack(raster(over[,,1], template=br),
raster(over[,,2], template=br),
raster(over[,,3], template=br)
)
colrst <- raster(t(valOrig), template=br)#; colrst[is.na(colrst)]  <- -1
qmCol <- quadmesh(colrst, na.rm=F)
}
qm <- quadmesh(rst, na.rm=F, texture=tr) #, texture="Earth.png")  #%>% reclassify(cbind(NA,NA, -1), right=F) %>% aggregate()
heightRange <- range(qm$vb[3,], na.rm=T)
if (prod(heightRange) < 0) # if range crosses zero then have rho(0) = 1
shiftZero <- 0.0
else
shiftZero  <- heightRange[1]
rho <- 1 + (sphereExtFac) * (qm$vb[3,] - shiftZero)/diff(heightRange)
x <-  rev(cos((qm$vb[1,]-90)/180*pi)) * sin((qm$vb[2,]-90)/180*pi) * 100 * rho # (100 + qm$vb[3,])
z <- rev(sin((qm$vb[1,]-90)/180*pi)) * sin((qm$vb[2,]-90)/180*pi) * 100 * rho # (100 + qm$vb[3,])
y <-  cos((qm$vb[2,]-90)/180*pi) * 100*rho
qms <- qm
qms$vb[1,]  <- x; qms$vb[2,] <- y; qms$vb[3,] <- z
if (!rasterHasNA) qms  <- addNormals(qms)
# pal[scales::rescale_mid(values, c(1,ncol), valRange)]
clear3d()
clear3d(type="lights"); light3d()#0,23, specular="grey50", viewp=T)
if (useRayShade4Sphere) {
# light3d(-45,-15, specular="white", viewp=T)
shade3d(qms, specular="black")
}
else {
qms$colorValue  <- scales::rescale_mid(qmCol$vb[3,qmCol$ib], c(1,length(pal)), c(minVal, maxVal))
plotColor <- pal[qms$colorValue]
plotColor[is.na(plotColor)] <- col4NA
shade3d(qms, col = plotColor , specular="grey30", meshColor="legacy", shininess=80)
}
if (renderOcean) {
#ocean <- is.na(qmCol$vb[3,qmCol$ib]) & (qm$vb[3,qm$ib] < 0)
#plotColor[ocean]  <- oceanCol
ocean <- qm
x <-  rev(cos((qm$vb[1,]-90)/180*pi)) * sin((qm$vb[2,]-90)/180*pi) * 100
z <- rev(sin((qm$vb[1,]-90)/180*pi)) * sin((qm$vb[2,]-90)/180*pi) * 100
y <-  cos((qm$vb[2,]-90)/180*pi) * 100
ocean$vb[1,]  <- x; ocean$vb[2,] <- y; ocean$vb[3,] <- z
ocean$texcoords <- NULL
# shade3d(ocean, col = oceanCol , specular="black", meshColor="legacy", alpha=0.8 * (plotColor == col4NA))
shade3d(ocean, col = oceanCol , specular="black", meshColor="legacy", alpha=0.8 * is.na(qms$colorValue))
}
}
for (round in 1:nRounds) {
cnt2 <- (round-1) * (nlayers(br) - 1 + append1st) * (nSubSteps + addlast) + cnt
theta <- allTheta[cnt2]
phi <- allPhi[cnt2]
view3d(theta = theta, phi=phi, zoom=0.7)
pngOut <- glue::glue("{outFolder}/{outPrefix}/{outPrefix}_{str_pad(cnt2+cntStart-1,5,pad='0')}.png")
render_snapshot(
filename = pngOut,
title_text = titles[i + (addlast == 1 & lambda == 1)],
title_position = "North",
title_size = 50
)
if (renderLegend) decorate_png(file = pngOut, legend_file = paste0(dirname(pngOut),"/legend.png"),
caption = caption, overwrite = TRUE)
} # round
} # j
} # i
} # if !justrendervideo
files <-
list.files(
path = glue::glue("{outFolder}/{outPrefix}/"),
pattern = glue::glue("{outPrefix}_.*.png"),
full.names = T
)
if (renderVideo) {
renderVideos(files, rewindLoop = rewindLoop, loop=loop, framerate = framerate, ... )
} #rendervideo
### WITH LOOP ONE NEEDS:
# av::av_encode_video(files, output=glue::glue("{outFolder}{outPrefix}_animation.mp4"), framerate = 4,
#                     vfilter = "loop=3:29:0")
# gifski::gifski(files, gif_file = glue::glue("{outFolder}{outPrefix}_animation.gif"), delay = 0.25, width=2400, height=1200)
if (justReRenderVideo) res1 <- "Just the video was rendered"
if (!exists("res1") & resume)  res1 <- "No result produced with resume, everything was there!"
invisible(files)
}
brick2movie(br[[6]] %>% aggregate(2) %>% rast() %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
brick2movie(br[[6]] %>% aggregate(1) %>% rast() %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
brick2movie(br[[6]] %>% aggregate(2) %>% rast() %>% project("+proj=igh") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
brick2movie(br[[6]] %>% aggregate(1) %>% rast() %>% project("+proj=igh") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
brick2movie(br[[6]] %>%crop(extent(-23.906250,55.458984, -37.889187,39.364140) %>% aggregate(1) %>% rast() %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
brick2movie(br[[6]] %>%crop(extent(-23.906250,55.458984, -37.889187,39.364140)) %>% aggregate(1) %>% rast() %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
brick2movie(br[[6]] %>%crop(extent(-23.906250,55.458984, -37.889187,39.364140)) %>% aggregate(1) %>% rast() %>% terra::disaggregate(2) %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
brick2movie(br[[6]] %>%crop(extent(-23.906250,55.458984, -37.889187,39.364140)) %>% aggregate(1) %>% rast() %>% terra::disaggregate(4) %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
library(plotmr)
brick2movie(br[[6]] %>% aggregate(1) %>% rast()  %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
library(plotmr)
loadedNamespaces()
loadedNamespaces()
library(plotmr)
loadedNamespaces()
brick2movie(br[[6]] %>% aggregate(1) %>% rast()  %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
library(raster)
brick2movie(br[[6]] %>% aggregate(1) %>% rast()  %>% project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
brick2movie(br[[6]] %>% aggregate(1) %>% terra::rast()  %>% terra::project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
library(plotmr)
brick2movie(br[[6]] %>% aggregate(1) %>% terra::rast()  %>% terra::project("+proj=robin") %>% raster(), eleRast = globalDEM0.5deg, gaussianSmoothSigma = 1, renderVideo = F, renderSphere=F, renderOcean = T, renderCountries = T, pal=rev(pal_MR$divViriMagma), phiStartEnd = c(70,70), elevat4NA = NA)
loadedNamespaces()
quit()
